import{c as A,d as q,e as U,f as d}from"./contants-3c5f400b.js";import{g as B}from"./useQuery-2326dd90.js";import{u as F}from"./useLazyQuery-f7f1f4cb.js";function w({graphQLvariables:_,graphQLData:O,hasSSrInitData:T}){var R,Y;let G="";const C=T==null?void 0:T.hasSSrInitData;(_==null?void 0:_.queryString)==="GQL_QUERY_GET_CATEGORIES_BY_FILTER"&&(G=A),(_==null?void 0:_.queryString)==="GQL_QUERY_GET_CATEGORIES_BY_SPECIFIC"&&(G=q),(_==null?void 0:_.queryString)==="GQL_QUERY_GET_TAGS_BY_FILTER"&&(G=U),(_==null?void 0:_.queryString)==="GQL_QUERY_GET_TAGS_BY_SPECIFIC"&&(G=d);const m=B`
    ${G}
  `;let E,t,o,e=()=>{};const[I,n]=F(m,{notifyOnNetworkStatusChange:!0,variables:_==null?void 0:_.variables});e=I,E=n.data,t=n.loading,o=n.error;let u=((R=E==null?void 0:E.tags)==null?void 0:R.edges)||((Y=E==null?void 0:E.categories)==null?void 0:Y.edges)||[];const c=t&&!u.length,f=!E&&!t&&!o;return C?(e=()=>{},u=T.initTermIDs.map((y,N)=>{var S;return{node:(S=window.ncmazCoreVariables)==null?void 0:S.ncmazCoreInitTerms[y]}})):e=I,{LIST_TERMS:u,IS_SKELETON:c,data:E,loading:t,error:o,funcGqlQueryGetTerms:e,DONOT_ANY_THING:f}}export{w as u};
